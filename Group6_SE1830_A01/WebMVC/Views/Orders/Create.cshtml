@model BLL.BusinessObjects.ViewCreateOrder
@{
    ViewBag.Title = "Tạo đơn hàng mới";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .co-wrapper {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 20px;
        max-width: 1200px;
        margin: 0 auto;
        padding: 14px;
        color: #0f172a;
    }

    .co-title {
        font-size: 22px;
        font-weight: 600;
        margin: 6px 0 16px 0;
    }

    .co-form, .co-inventory {
        background: #ffffff;
        padding: 16px;
        border-radius: 10px;
        box-shadow: 0 4px 14px rgba(15,23,42,0.06);
    }

    .co-group {
        margin-bottom: 14px;
    }

    .co-label {
        display: block;
        font-size: 14px;
        margin-bottom: 6px;
        font-weight: 500;
    }

    .co-input, .co-select {
        width: 100%;
        padding: 8px 10px;
        border: 1px solid #cbd5e1;
        border-radius: 6px;
        font-size: 14px;
    }

    .co-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 12px;
        margin-bottom: 14px;
    }

        .co-table th {
            background: #f1f5f9;
            padding: 8px 10px;
            text-align: left;
            font-size: 13px;
        }

        .co-table td {
            padding: 8px 10px;
            border-top: 1px solid #e2e8f0;
        }

    .co-btn {
        display: inline-block;
        padding: 8px 14px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        text-decoration: none;
        border: none;
    }

    .co-btn-add {
        background: #16a34a;
        color: #fff;
        margin-top: 6px;
    }

        .co-btn-add:hover {
            background: #15803d;
        }

    .co-btn-save {
        background: #2563eb;
        color: #fff;
    }

        .co-btn-save:hover {
            background: #1d4ed8;
        }

    .co-btn-cancel {
        background: #dc2626;
        color: #fff;
        margin-left: 8px;
    }

        .co-btn-cancel:hover {
            background: #b91c1c;
        }

    .co-total {
        text-align: right;
        font-weight: 600;
        margin: 12px 0;
        font-size: 15px;
    }

    /* Inventory list */
    .co-inventory h3 {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .inv-search {
        margin-bottom: 12px;
    }

        .inv-search input {
            width: 100%;
            padding: 8px 10px;
            border: 1px solid #cbd5e1;
            border-radius: 6px;
            font-size: 14px;
        }

    .inv-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-height: 600px;
        overflow-y: auto;
    }

    .inv-item {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        padding: 10px;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .inv-info {
        flex: 1;
    }

    .inv-item h4 {
        font-size: 14px;
        margin: 0 0 4px 0;
        font-weight: 600;
    }

    .inv-item p {
        margin: 0;
        font-size: 13px;
        color: #334155;
    }

    .inv-item button {
        background: #0ea5e9;
        color: #fff;
        border: none;
        padding: 6px 10px;
        border-radius: 6px;
        font-size: 13px;
        cursor: pointer;
        white-space: nowrap;
    }

        .inv-item button:hover {
            background: #0284c7;
        }
</style>

<div class="co-wrapper">
    <div>
        <h2 class="co-title">Tạo đơn hàng mới</h2>

        <form class="co-form" method="post" action="@Url.Action("CreateOrder", "Orders")" id="orderForm">
            <div class="co-group">
                <label class="co-label">Nhân viên thực hiện</label>
                <select class="co-select" name="StaffId">
                    @foreach (var s in Model.Staffs)
                    {
                        <option value="@s.StaffId">@s.FullName</option>
                    }
                </select>
            </div>

            <div class="co-group">
                <label class="co-label">Khách hàng</label>
                <select class="co-select" name="CustomerId">
                    @foreach (var c in Model.Customers)
                    {
                        <option value="@c.CustomerId">@c.FullName</option>
                    }
                </select>
            </div>

            <!-- Bảng chọn xe -->
            <table class="co-table" id="orderTable">
                <thead>
                    <tr>
                        <th>Xe</th>
                        <th>Phiên bản</th>
                        <th>Số lượng</th>
                        <th>Đơn giá</th>
                        <th>Thành tiền</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

            <div class="co-total" id="grandTotal">Tổng tiền: 0</div>

            <input type="hidden" name="OrderItemsJson" id="OrderItemsJson">

            <button type="submit" class="co-btn co-btn-save">💾 Lưu Order</button>
            <a href="@Url.Action("Index", "Orders")" class="co-btn co-btn-cancel">✖ Hủy</a>
        </form>
    </div>

    <div class="co-inventory">
        <h3>Xe tồn kho</h3>
        <div class="inv-search">
            <input type="text" id="searchBox" placeholder="🔍 Tìm kiếm xe...">
        </div>
        <div class="inv-list" id="invList">
            @foreach (var car in Model.Inventories)
            {
                <div class="inv-item"
                     data-versionid="@car.Version.VersionId"
                     data-colorid="@car.Color.ColorId"
                     data-version="@car.Version.VersionName"
                     data-name="@car.Version.Model.ModelName - @car.Color.ColorName"
                     data-price="@((car.Version.BasePrice + car.Color.ExtraCost).Value)"
                     data-stock="@car.Quantity">
                    <div class="inv-info">
                        <h4>@car.Version.Model.ModelName - @car.Color.ColorName</h4>
                        <p>Phiên bản: @car.Version.VersionName</p>
                        <p>Giá: @((car.Version.BasePrice + car.Color.ExtraCost).Value.ToString("N0"))</p>
                        <p>Còn: @car.Quantity chiếc</p>
                    </div>
                    <button type="button" onclick="addFromInventory(this)">+ Chọn</button>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function addFromInventory(btn) {
        const item = btn.closest(".inv-item");
        const name = item.dataset.name;
        const version = item.dataset.version;
        const price = parseInt(item.dataset.price);
        const stock = parseInt(item.dataset.stock);
        const versionId = item.dataset.versionid;
        const colorId = item.dataset.colorid;

        if (stock <= 0) {
            alert("Hết hàng!");
            return;
        }

        const tbody = document.querySelector("#orderTable tbody");
        let row = [...tbody.querySelectorAll("tr")].find(r => r.dataset.name === name);

        if (row) {
            let qtyInput = row.querySelector(".order-qty");
            let currentQty = parseInt(qtyInput.value);
            let newQty = Math.min(currentQty + 1, stock);
            qtyInput.value = newQty;
            updateRowTotal(row, price, stock);
        } else {
            const index = tbody.querySelectorAll("tr").length;
            row = document.createElement("tr");
            row.dataset.name = name;
            row.dataset.stock = stock;

            row.innerHTML = `
                <td>${name}</td>
                <td>${version}</td>
                <td>
                    <input type="number"
                           class="order-qty"
                           name="CreateOrderDetails[${index}].Quantity"
                           value="1"
                           min="1"
                           max="${stock}"
                           onchange="updateRowTotal(this.closest('tr'), ${price}, ${stock})">
                </td>
                <td>
                    ${price.toLocaleString()}
                    <input type="hidden" name="CreateOrderDetails[${index}].UnitPrice" value="${price}">
                </td>
                <td class="row-total" data-total="${price}">${price.toLocaleString()}</td>
                <td>
                    <input type="hidden" name="CreateOrderDetails[${index}].VersionId" value="${versionId}">
                    <input type="hidden" name="CreateOrderDetails[${index}].ColorId" value="${colorId}">
                    <button type="button" onclick="removeRow(this)">❌</button>
                </td>
            `;
            tbody.appendChild(row);
        }

        updateGrandTotal();
    }

    function updateRowTotal(row, price, stock) {
        let qtyInput = row.querySelector(".order-qty");
        let qty = parseInt(qtyInput.value);

        if (isNaN(qty) || qty < 1) qty = 1;
        if (qty > stock) qty = stock;

        qtyInput.value = qty;

        let total = qty * price;
        let totalCell = row.querySelector(".row-total");
        totalCell.innerText = total.toLocaleString();
        totalCell.dataset.total = total;

        updateGrandTotal();
    }

    function removeRow(btn) {
        const row = btn.closest("tr");
        row.remove();

        reindexOrderItems();
        updateGrandTotal();
    }

    function updateGrandTotal() {
        let total = 0;
        document.querySelectorAll("#orderTable tbody tr .row-total").forEach(cell => {
            total += parseInt(cell.dataset.total || "0");
        });
        document.getElementById("grandTotal").innerText = "Tổng tiền: " + total.toLocaleString();
    }

    function reindexOrderItems() {
        const rows = document.querySelectorAll("#orderTable tbody tr");
        rows.forEach((row, i) => {
            row.querySelectorAll("input, select").forEach(input => {
                if (input.name.startsWith("CreateOrderDetails[")) {
                    const prop = input.name.substring(input.name.indexOf("].") + 2);
                    input.name = `CreateOrderDetails[${i}].${prop}`;
                }
            });
        });
    }

    document.getElementById("searchBox").addEventListener("input", function() {
        const keyword = this.value.toLowerCase();
        document.querySelectorAll(".inv-item").forEach(item => {
            const name = item.getAttribute("data-name").toLowerCase();
            item.style.display = name.includes(keyword) ? "flex" : "none";
        });
    });
</script>
